i:x = 5**7
  y = 7**5
1)timeit(x + y)
    381 ns ± 10.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
  2)timeit(x * y)
    483 ns ± 149 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
  3)timeit(x / y)
    318 ns ± 26.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
    Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением: (391.9 / 632)*100 = 62.00949367088607
            разница между умножением и делением:  (344.4 / 632) * 100 = 54.493670886075954
            разница между делением и сложением:  (344.4 / 391.9) * 100) = 87.8795611125287

            Вывод: сложение выполняется быстрее, чем умножение примерно на 40%
                   деление выполняется быстрее, чем умножение примерно на 45%
                   деление выполняется быстрее, чем сложение примерно на 12%
                   Предположение: умножение выполняется дольшех всех в данном случае, так как операция с данными числами
                                  требует больше места в памяти

ii: x = 17 ** 19
    y = 19 ** 17
1)timeit(x + y)
  334 ns ± 23.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
2)timeit(x * y)
  363 ns ± 23.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
3)timeit(x / y)
  274 ns ± 19.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением:  357.6 / 386.7 * 100 = 92.47478665632273
            разница между умножением и делением:   293.1 / 386.7 * 100 =  75.79519006982157
            разница между делением и сложением:  293.1 / 357.6 * 100 = 81.96308724832215

            Вывод: сложение выполняется быстрее, чем умножение примерно на 7%
                   деление выполняется быстрее, чем умножение примерно на 25%
                   деление выполняется быстрее, чем сложение примерно на 18%
                   Предположение: умножение выполняется дольшех всех в данном случае, так как операция с данными числами
                                  требует больше места в памяти


iii: x = 1e30
     y = 1e-30
1)timeit(x + y)
  268 ns ± 32.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
2)timeit(x * y)
  259 ns ± 32.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
3)timeit(x / y)
301 ns ± 39.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением:  291.6 / 316.4 * 100 = 92.16182048040457
            разница между умножением и делением:   291.6 / 340.8 * 100 =  85.56338028169014
            разница между делением и сложением:  316.4 / 340.8 * 100 = 92.84037558685445

            Вывод: умножение выполняется быстрее, чем сложение примерно на 8%
                   умножение выполняется быстрее, чем деление примерно на 14%
                   сложение выполняется быстрее, чем деление примерно на 7%
                   Предположение: деление выполняется дольшех всех в данном случае, так как операция с данными числами
                                  требует больше места в памяти

iv)x = 1+2j
   y = 2-1j
1)timeit(x + y)
  307 ns ± 43.5 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
2)timeit(x * y)
  333 ns ± 75.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
3)timeit(x / y)
  505 ns ± 46.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением:  350.5 / 408.6 * 100 = 85.78071463534019
            разница между умножением и делением:   408.6 / 580.3 * 100 = 70.41185593658453
            разница между делением и сложением:  350.5 / 580.3 * 100 = 60.39979321040841

            Вывод: сложение выполняется быстрее, чем умножение примерно на 14%
                   умножение выполняется быстрее, чем деление примерно на 29%
                   сложение выполняется быстрее, чем деление примерно на 40%
                   Предположение: деление выполняется дольшех всех в данном случае, так как операция деления с данным
                                  типом данных требует больше места в памяти

v)from decimal import Decimal as D
  x = D('0.33')
  y = D('1.66')
1)timeit(x + y)
  455 ns ± 61.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
2)timeit(x * y)
  496 ns ± 86.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
3)timeit(x / y)
  832 ns ± 66.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением:  516.4 / 582.1 * 100 = 88.71327950523964
            разница между умножением и делением:   582.1 / 898.1 * 100 = 64.81460861819397
            разница между делением и сложением:  516.4 / 898.1 * 100 = 57.49916490368555

            Вывод: сложение выполняется быстрее, чем умножение примерно на 11%
                   умножение выполняется быстрее, чем деление примерно на 35%
                   сложение выполняется быстрее, чем деление примерно на 43%
                   Предположение: деление выполняется дольшех всех в данном случае, так как операция деления с данным
                                  типом данных требует больше места в памяти

vi)from decimal import Decimal as D
  x = D(5**7)
  y = D(7**5)
1)timeit(x + y)
  474 ns ± 56.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
2)timeit(x * y)
  455 ns ± 56 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
3)timeit(x / y)
  868 ns ± 59.5 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением:  511 / 530.7 * 100 = 96.287921612964
            разница между умножением и делением:   511 / 927.5 * 100 = 55.094339622641506
            разница между делением и сложением:  530.7 / 927.5 * 100 = 57.21832884097036

            Вывод: умножение выполняется быстрее, чем сложение примерно на 4%
                   умножение выполняется быстрее, чем деление примерно на 45%
                   сложение выполняется быстрее, чем деление примерно на 43%
                   Предположение: деление выполняется дольшех всех в данном случае, так как операция деления с данным
                                  типом данных требует больше места в памяти




vii)from decimal import Decimal as D
  x = D(17**19)
  y = D(19**17)
1)timeit(x + y)
  477 ns ± 47.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
2)timeit(x * y)
  1.15 µs ± 17.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
3)timeit(x / y)
  2 µs ± 199 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

Results:
            используем формулу расчета разницы в процентах: b / a * 100
            разница между умножением и сложением:  524.6 / 1132.6 * 100 = 46.318205897933964
            разница между умножением и делением:   1132.6 / 2199 * 100 = 51.505229649840835
            разница между делением и сложением:  524.6 / 2199 * 100 = 23.85629831741701

            Вывод: сложение выполняется быстрее, чем умножение примерно на 54%
                   умножение выполняется быстрее, чем деление примерно на 49%
                   сложение выполняется быстрее, чем деление примерно на 76%
                   Предположение: деление выполняется дольшех всех в данном случае, так как операция деления с данным
                                  типом данных требует больше места в памяти

4)s = "ab" * 10000 + "c"
i)x = 'a'
  timeit(x in s)
  282 ns ± 34.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
ii)x = 'b'
  timeit(x in s)
  257 ns ± 29.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
iii)x = 'c'
    timeit(x in s)
    13.1 µs ± 135 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
    Вывод: скорости в первых 2 вариантах примерно одинаковые, а вот 3 вариант занимает в разы больше времени,
           можно предположить, что, чем дальше находится элемент, тем больше времени уходит на его поиск
iv)x = 'ab'
   timeit(x in s)
   279 ns ± 28.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
v)x = 'ba'
  timeit(x in s)
  283 ns ± 32.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
vi)x = 'bc'
   timeit(x in s)
   42.6 µs ± 2.68 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
vii)x = 'ac'
    x in s
    False
Вывод: скорости в первых 2 вариантах примерно одинаковые, а вот 3 вариант занимает в разы больше времени,
           можно предположить, что поиск элементов занимает столько времени, так как они находятся в конце
           и 'bc' уникальны s, следовательно больше времени уходит на его поиск
viii)x = "ababababababababababc"
     timeit(x in s)
     81.3 µs ± 5.07 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
     Вывод: чем больше символов в строке, тем больше времени уходит на поиск строки в s,
            также строка находится в конце s, что также влияет на время



5)
i)L = [i for i in range(10000)]
  x = 0
  timeit(x in L)
  238 ns ± 35.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
  x = 9999
  timeit(x in L)
  463 µs ± 44.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
  x = 10000
  timeit(x in L)
  460 µs ± 41.9 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
  Вывод: чем больше число, тем больше времени, так как нужно больше итераций в цикле
ii)T = tuple(i for i in range(10000))
   x = 0
   timeit(x in T)
   215 ns ± 25.6 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   x = 9999
   timeit(x in T)
   611 µs ± 88.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
   x = 10000
   timeit(x in T)
   473 µs ± 44.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
   Вывод: чем больше число, тем больше времени, так как нужно больше итераций в цикле
iii)S = {i for i in range(10000)}
    x = 0
    timeit(x in S)
    221 ns ± 18.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
    x = 9999
    timeit(x in S)
    288 ns ± 23.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
    x = 10000
    timeit(x in S)
    239 ns ± 35.5 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
    Вывод: создание множества и поиск элемента в цикле гораздо быстрее, чем в предыдущих вариантах
iv)D = {i:i for i in range(10000)}
   x = 0
   timeit(x in D)
   245 ns ± 33.2 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   x = 9999
   timeit(x in D)
   294 ns ± 26.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   x = 10000
   timeit(x in D)
   245 ns ± 34.2 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   Вывод: в дикте поиск идет быстро
v)R = range(10000)
  x = 0
  timeit(x in R)
  461 ns ± 62.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
  x = 9999
  timeit(x in R)
  547 ns ± 71.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
  x = 10000
  timeit(x in R)
  327 ns ± 36.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)


 Вывод: кортеж самый медленный, сет и дикт - самые быстрые
