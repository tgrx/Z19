Function: (5 ** 7) + (7 ** 5)  
Time: 0.00024 

Function: 17**19 + 19**17  
Time: 0.00029 

Function: 1e30 + 1e-30  
Time: 0.00023 

Function: 1+2j + 2-1j  
Time: 0.00027 

Function: 0.33" + "1.66  
Time: 0.0004 

Function: 5**7 + 7**5  
Time: 0.00063 

Function: 17**19 + 19**17  
Time: 0.0009 

Function: (5 ** 7) * (7 ** 5)  
Time: 0.00027 

Function: 17**19 * 19**17 
Time: 0.00035 

Function: 1e30 * 1e-30  
Time: 0.00024 

Function: 1+2j * 2-1j  
Time: 0.00026 

Function: 0.33" * "1.66  
Time: 0.00036 

Function: 5**7 * 7**5  
Time: 0.00078 

Function: 17**19 * 19**17  
Time: 0.00117 

Function: (5 ** 7) / (7 ** 5)  
Time: 0.00026 

Function: 17**19 / 19**17  
Time: 0.00059 

Function: 1e30 / 1e-30  
Time: 0.00025 

Function: 1+2j / 2-1j  
Time: 0.00025 

Function: 0.33" / "1.66  
Time: 0.00056 

Function: 5**7 / 7**5  
Time: 0.0019 

Function: 17**19 / 19**17  
Time: 0.00216 

Function: searching 'a' in s = "ab" * 10000 + "c"  
Time: 0.00012 

Function: searching 'b' in s = "ab" * 10000 + "c"  
Time: 0.00011 

Function: searching 'c' in s = "ab" * 10000 + "c"  
Time: 0.00075 

Function: searching 'ab' in s = "ab" * 10000 + "c"  
Time: 0.00011 

Function: searching 'ba' in s = "ab" * 10000 + "c"  
Time: 0.00011 

Function: searching 'bc' in s = "ab" * 10000 + "c"  
Time: 0.0132 

Function: searching 'ac' in s = "ab" * 10000 + "c"  
Time: 0.01309 

Function: searching 'ababababababababababc' in s = "ab" * 10000 + "c"  
Time: 0.02752 

Function: searching 0 in [i for i in range(10000)]  
Time: 0.0001 

Function: searching 9999 in [i for i in range(10000)]  
Time: 0.15921 

Function: searching 10000 in [i for i in range(10000)]  
Time: 0.15883 

Function: searching 0 in tuple(i for i in range(10000))  
Time: 0.00019 

Function: searching 9999 in tuple(i for i in range(10000))  
Time: 0.15586 

Function: searching 10000 in tuple(i for i in range(10000))  
Time: 0.14632 

Function: searching 0 in {i for i in range(10000)}  
Time: 0.0001 

Function: searching 9999 in {i for i in range(10000)}  
Time: 0.00012 

Function: searching 10000 in {i for i in range(10000)}  
Time: 0.0001 

Function: searching 0 in {i:i for i in range(10000)}  
Time: 0.00011 

Function: searching 9999 in {i:i for i in range(10000)}  
Time: 0.00013 

Function: searching 10000 in {i:i for i in range(10000)}      
Time: 0.00011 

Function: searching 0 in range(10000)  
Time: 0.00018 

Function: searching 9999 in range(10000)  
Time: 0.00019 

Function: searching 10000 in range(10000)  
Time: 0.00014 

Below written has the format: 
 the first line is the slowest type, his speed accepted as one; 
another lines are the faster types, their speed shows how many times they are faster the slowest type.


Time for searching 0: 
['range ']1.0
['dict  ']1.6062861672164674
['set   ']1.730127798707051
['list  ']1.796124623926671
['tuple ']1.8354026818157532

Time for searching 9999: 
['tuple ']1.0
['list  ']1.0483088149125699
['range ']747.5165524440118
['dict  ']1122.6248247213493
['set   ']1216.6029624759965

Time for searching 10000: 
['list  ']1.0
['tuple ']1.0307197963709998
['range ']1044.4218265606644
['dict  ']1408.1111715488423
['set   ']1455.4397670571595
